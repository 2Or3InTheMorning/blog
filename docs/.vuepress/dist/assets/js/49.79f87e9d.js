(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{446:function(t,s,v){"use strict";v.r(s);var r=v(3),_=Object(r.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"单处理器进程的调度策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单处理器进程的调度策略"}},[t._v("#")]),t._v(" 单处理器进程的调度策略")]),t._v(" "),v("h2",{attrs:{id:"先来先服务（first-come-first-served，fcfs）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#先来先服务（first-come-first-served，fcfs）"}},[t._v("#")]),t._v(" 先来先服务（First-Come-First-Served，FCFS）")]),t._v(" "),v("p",[v("strong",[t._v("选择等待处理器时间最长的进程。")])]),t._v(" "),v("blockquote",[v("p",[t._v("换句话就是谁先来，就执行谁。如果中间某些进程因为I/O阻塞，这些进程会挂起并移到就绪队列。")])]),t._v(" "),v("h3",{attrs:{id:"缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),v("ul",[v("li",[t._v("对"),v("code",[t._v("短进程")]),t._v("不利")]),t._v(" "),v("li",[t._v("对"),v("code",[t._v("I/O密集型的进程")]),t._v("不利")])]),t._v(" "),v("h2",{attrs:{id:"轮转"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#轮转"}},[t._v("#")]),t._v(" 轮转")]),t._v(" "),v("p",[v("strong",[t._v("使用时间片来限制“任何正在执行的进程”只能使用一段处理器时间，并在所有就绪进程中轮转。（是一种基于时钟的抢占策略）")])]),t._v(" "),v("blockquote",[v("p",[t._v("以一个周期性间隔来产生时钟中断，当中断发生时，“当前正在运行的进程”会被挂起并置于就绪队列中，然后基于FCFS策略选择下一个就绪的作业进行。")]),t._v(" "),v("p",[t._v("这种技术也称为时间片（time slicing），因为每个进程在被抢占前都被给定一片时间。")])]),t._v(" "),v("h3",{attrs:{id:"难点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#难点"}},[t._v("#")]),t._v(" 难点")]),t._v(" "),v("p",[t._v("难点是"),v("strong",[t._v("时间片的长度")]),t._v("，因为时间片最好"),v("strong",[t._v("略大于")]),v("code",[t._v("一次典型的交互所需要的时间")]),t._v("（否则大多数进程都需要2个时间片）")]),t._v(" "),v("h3",{attrs:{id:"优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),v("ul",[v("li",[t._v("减少了在FCFS策略下对短进程的不利情况")])]),t._v(" "),v("h2",{attrs:{id:"最短进程优先（shortest-process-next，spn）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#最短进程优先（shortest-process-next，spn）"}},[t._v("#")]),t._v(" 最短进程优先（Shortest Process Next，SPN）")]),t._v(" "),v("p",[v("strong",[t._v("选择预期处理时间最短的进程，并且不抢占该进程。（是一种非抢占的策略）")])]),t._v(" "),v("blockquote",[v("p",[t._v("其原则是下一次选择预计处理时间最短的进程。因此短进程将会越过长进程，跳到队列头")])]),t._v(" "),v("h3",{attrs:{id:"难点-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#难点-2"}},[t._v("#")]),t._v(" 难点")]),t._v(" "),v("p",[t._v("难点是"),v("strong",[t._v("需要估计每个进程所需要的处理时间")])]),t._v(" "),v("h3",{attrs:{id:"优点-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),v("ul",[v("li",[t._v("减少FCFS固有的对长进程的偏向")])]),t._v(" "),v("h3",{attrs:{id:"缺点-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),v("ul",[v("li",[t._v("如果持续不断地提供更短的进程，长进程就有可能饥饿")]),t._v(" "),v("li",[t._v("由于缺少抢占机制，一旦长进程得到CPU，得等它执行完，可能导致后面的进程得不到响应")])]),t._v(" "),v("h2",{attrs:{id:"最短剩余时间（shortest-remaining-time，srt）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#最短剩余时间（shortest-remaining-time，srt）"}},[t._v("#")]),t._v(" 最短剩余时间（Shortest Remaining Time，SRT）")]),t._v(" "),v("p",[v("strong",[t._v("选择预期的剩余处理时间最短的进程。当另一个进程就绪时，这个进程可能会被抢占。")])]),t._v(" "),v("blockquote",[v("p",[t._v("针对"),v("strong",[t._v("SPN")]),t._v("增加了抢占机制，通过比较"),v("strong",[t._v("刚添加的新进程")]),t._v("和"),v("strong",[t._v("正在执行的老进程")]),t._v("的"),v("code",[t._v("剩余时间")]),t._v("，如果新进程剩余时间更短，新进程就会抢占老进程的执行权。")])]),t._v(" "),v("h3",{attrs:{id:"优点-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优点-3"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),v("ul",[v("li",[t._v("不像FCFS那样偏向长进程（SRT下，相对于正在执行的长进程，短进程可以立即被选择执行）")]),t._v(" "),v("li",[t._v("不像轮转那样会产生额外的中断")])]),t._v(" "),v("h3",{attrs:{id:"缺点-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),v("ul",[v("li",[t._v("要记录进程的历史执行时间（即服务时间），从而增加了开销")]),t._v(" "),v("li",[v("strong",[t._v("长进程饥饿的问题还是没有解决")])])]),t._v(" "),v("h2",{attrs:{id:"最高响应比优先（hrrn）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#最高响应比优先（hrrn）"}},[t._v("#")]),t._v(" 最高响应比优先（HRRN）")]),t._v(" "),v("p",[v("strong",[t._v("调度策略基于对归一化周转时间的估计。")])]),t._v(" "),v("blockquote",[v("p",[t._v("为了"),v("strong",[t._v("解决长进程饥饿问题")]),t._v("，同时提高进程的响应速率，HRRN策略会选择"),v("strong",[t._v("响应比最高")]),t._v("的进程优先执行。")])]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("响应比 = （等待处理器时间 + 预计执行时间） / 预计执行时间\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("ul",[v("li",[t._v("对于短进程来说，因为"),v("code",[t._v("预计执行时间")]),t._v("很短，分母小，所以响应比比较高，会被优先执行")]),t._v(" "),v("li",[t._v("对于长进程来说，因为"),v("code",[t._v("预计执行时间")]),t._v("较长，一开始响应比小，但随着等待时间增加，它的优先级会越来越高，最终可以被执行")])]),t._v(" "),v("h2",{attrs:{id:"反馈法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#反馈法"}},[t._v("#")]),t._v(" 反馈法")]),t._v(" "),v("p",[v("strong",[t._v("建立一组调度队列，基于每个进程的执行历史和其他一些准则，把它们分配到各个队列中（通过轮转（基于时间片抢占） + 动态优先级机制）")])]),t._v(" "),v("blockquote",[v("p",[t._v("因为如果没有关于各个进程相对长度的任何信息，则SPN、SRT和HRRN都不能使用。如果不能获得剩余的执行时间，那就关注已经执行了的时间")]),t._v(" "),v("p",[t._v("这种策略下：每个进程一开始都有相同的优先级，每次被抢占（需要配合其他抢占策略使用，如轮转），优先级就会降低一级（因为执行太长，要“受惩罚”）。因此这种策略通常会根据优先级划分多个队列。")])]),t._v(" "),v("h3",{attrs:{id:"缺点-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺点-4"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),v("ul",[v("li",[t._v("仍然可能导致长进程饥饿（有一种补救方法是当一个进程在它的当前队列中等待处理器时间超过一定的阈值后，把它提升到一个优先级较高的队列中）")])]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("没有一种调度策略是万能的，它需要考虑很多因素：")]),t._v(" "),v("ul",[v("li",[t._v("响应速率。进程等待处理器的时间")]),t._v(" "),v("li",[t._v("公平性。兼顾短进程、长进程、I/O进程")])]),t._v(" "),v("p",[t._v("这两者在某些情况下是对立的，提高了响应速率，可能会降低公平性，导致饥饿。短进程、长进程、I/O进程之间要取得平衡也非常难。")]),t._v(" "),v("p",[v("strong",[t._v("调度算法的选择")]),t._v("取决于："),v("code",[t._v("预期的性能")]),t._v("和"),v("code",[t._v("实现的复杂度")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"参考链接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://juejin.im/post/5dadc6045188255a270a0f85#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("这可能是最通俗的 React Fiber(时间分片) 打开方式"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("《操作系统——精髓与设计原理（第七版）》")])])])}),[],!1,null,null,null);s.default=_.exports}}]);