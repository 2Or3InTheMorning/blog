(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{565:function(a,t,v){"use strict";v.r(t);var r=v(43),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"跨端音频组件上层封装-rn、h5"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#跨端音频组件上层封装-rn、h5"}},[a._v("#")]),a._v(" 跨端音频组件上层封装（RN、H5）")]),a._v(" "),v("h2",{attrs:{id:"基本信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息"}},[a._v("#")]),a._v(" 基本信息")]),a._v(" "),v("ul",[v("li",[a._v("所用技术: ES7、Babel、Webpack、ReactNative、Lerna、Mnb")]),a._v(" "),v("li",[a._v("描述: 针对云音乐RPC音频播放能力的上层组件封装，以及抹平Native两端不一致问题。")]),a._v(" "),v("li",[a._v("成果: 已承接云音乐App内部分播放场景(如排行榜、新歌发布⻚等);对⻬Native两端功能;提升音频RPC接入效率;提高工程维护性。")])]),a._v(" "),v("h2",{attrs:{id:"职责"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#职责"}},[a._v("#")]),a._v(" 职责")]),a._v(" "),v("ul",[v("li",[a._v("调研主流Audio Context;")]),a._v(" "),v("li",[a._v("组件设计与封装;")]),a._v(" "),v("li",[a._v("多平台(RN、H5)拆包;")]),a._v(" "),v("li",[a._v("跟进客户端RPC问题;")]),a._v(" "),v("li",[a._v("提供组件文档、Demo;")])]),a._v(" "),v("h2",{attrs:{id:"概念图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念图"}},[a._v("#")]),a._v(" 概念图")]),a._v(" "),v("img",{attrs:{src:"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7967604397/0251/f157/fd44/1bfabda833e745a965fdf708b2b922bc.png",width:"400px"}}),a._v(" "),v("h2",{attrs:{id:"难点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#难点"}},[a._v("#")]),a._v(" 难点")]),a._v(" "),v("h3",{attrs:{id:"组件设计与封装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组件设计与封装"}},[a._v("#")]),a._v(" 组件设计与封装")]),a._v(" "),v("p",[a._v("组件设计原则")]),a._v(" "),v("ul",[v("li",[a._v("单一原则：每个模块的职责单一\n"),v("ul",[v("li",[a._v("事件管理实例（EventManager）：对于每个事件（playerChanged、songChanged）的JSBridge调用，进行单一封装。参数合法化")])])]),a._v(" "),v("li",[a._v("开放封闭原则：模块允许扩展，避免在原设计上修改\n"),v("ul",[v("li",[a._v("播放器实例（PlayerManager）：可以往PlayManager加入更多方法，但尽量不修改原有方法")])])]),a._v(" "),v("li",[a._v("里式替换原则：调用子模块依然能保证父模块的功能\n"),v("ul",[v("li",[a._v("rpc-audio-h5依然能实现rpc-audio-core的功能")])])]),a._v(" "),v("li",[a._v("接口隔离原则：在实现功能的前提下，依赖尽少的模块\n"),v("ul",[v("li",[a._v("rpc-audio-h5、rpc-audio-rn，根据平台只引入其中一个")])])]),a._v(" "),v("li",[a._v("依赖倒置原则：复杂模块应该依赖于抽象的接口，而不应该依赖于低级模块的具体实现")])]),a._v(" "),v("h3",{attrs:{id:"设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[a._v("#")]),a._v(" 设计模式")]),a._v(" "),v("p",[a._v("PlayerManager、EventManager、RPCManager")]),a._v(" "),v("ul",[v("li",[a._v("工厂模式")]),a._v(" "),v("li",[a._v("单例模式\n"),v("ul",[v("li",[a._v("播放器实例（PlayerManager）：构造函数判断是否存在实例，若是则返回player")])])]),a._v(" "),v("li",[a._v("观察者模式")]),a._v(" "),v("li",[a._v("发布订阅模式\n"),v("ul",[v("li",[a._v("事件管理实例（EventManager）：绑定（on）、触发（emit）、解绑（off）事件")])])]),a._v(" "),v("li",[a._v("代理模式")])]),a._v(" "),v("h3",{attrs:{id:"audiocontext"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#audiocontext"}},[a._v("#")]),a._v(" AudioContext")]),a._v(" "),v("p",[a._v("调研AudioContext")])])}),[],!1,null,null,null);t.default=e.exports}}]);